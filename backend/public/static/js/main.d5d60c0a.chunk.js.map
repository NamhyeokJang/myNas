{"version":3,"sources":["pages/Home/Home.js","pages/Login/Login.js","pages/Wol/Wol.js","components/Header/Header.js","App.js","serviceWorker.js","index.js","stores/UserStore.js","components/Header/Header.module.css","pages/Home/Home.module.css","pages/Wol/Wol.module.css","assets/logo.png","pages/Login/Login.module.css"],"names":["Home","inject","observer","userStore","this","props","className","styles","container","isLogin","to","username","userInfo","name","isHost","Component","Login","action","bound","handleSubmit","a","axios","post","process","password","res","data","result","succeedLogin","user","alert","onChange","handleInput","placeholder","size","style","marginBottom","onClick","width","observable","e","target","value","Wol","sendWol","get","then","success","msg","isOn","alive","wol_status","ThunderboltTwoTone","twoToneColor","fontSize","Header","handleNotLogin","handleLogout","succeedLogout","menu","logo","src","alt","App","exact","path","component","Boolean","window","location","hostname","match","sessionStorage","getItem","JSON","parse","setItem","stringify","removeItem","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.d5d60c0a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom'\nimport { observable, action } from 'mobx'\nimport { observer, inject } from 'mobx-react'\n\nimport styles from './Home.module.css'\n\n@inject('userStore')\n@observer\nclass Home extends Component {\n    render() {\n        const { userStore } = this.props\n        return (\n            <div className={styles.container}>\n                {!userStore.isLogin && <Redirect to='/login' />}\n                <h1>Home</h1>\n                <h3>Welcome <span className={styles.username}>{userStore.userInfo.name}</span></h3>\n                <p>{userStore.userInfo.isHost ? `You're Host` : ''}</p>\n            </div>\n        );\n    }\n\n}\n\nexport default Home;","import React, { Component } from 'react'\nimport { Redirect } from 'react-router-dom'\nimport axios from 'axios'\nimport { observable, action } from 'mobx'\nimport { observer, inject } from 'mobx-react'\nimport { Input, Button } from 'antd'\n\n\nimport styles from './Login.module.css'\n\n@inject('userStore')\n@observer\nclass Login extends Component {\n    @observable username = ''\n    @observable password = ''\n\n    render() {\n        const { userStore } = this.props\n        return (\n            <div className={styles.container}>\n                {userStore.isLogin && <Redirect to='/' />}\n                <h1>Login</h1>\n                <Input onChange={this.handleInput} placeholder='Name' name='username' size='large' style={{ marginBottom: '10px' }} />\n                <Input onChange={this.handleInput} placeholder='Password' name='password' size='large' style={{ marginBottom: '10px' }} />\n                <Button onClick={this.handleSubmit} size='large' style={{ width: '100%' }}>Submit</Button>\n            </div>\n        );\n    }\n\n    @action.bound\n    handleInput = (e) => {\n        const { name, value } = e.target\n        this[name] = value\n    }\n\n    handleSubmit = async () => {\n        const res = await axios.post(`${process.env.REACT_APP_API}/api/user/login`, { name: this.username, password: this.password })\n        if (res.data.result === 'successs') {\n            this.props.userStore.succeedLogin(res.data.user[0])\n\n        } else {\n            alert(\"login Failed\")\n        }\n    }\n}\n\nexport default Login;","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom'\nimport axios from 'axios'\nimport { Button } from 'antd'\nimport { ThunderboltTwoTone } from '@ant-design/icons'\nimport { observer, inject } from 'mobx-react';\nimport { observable } from 'mobx';\n\nimport styles from './Wol.module.css'\n@inject('userStore')\n@observer\nclass Wol extends Component {\n    @observable isOn\n\n    async componentDidMount() {\n        await axios.get(`${process.env.REACT_APP_API}/utils/wol/ping`)\n            .then(res => this.isOn = res.data.alive)\n    }\n\n    render() {\n        const { userStore } = this.props\n        return (\n            <div className={styles.container}>\n                {!userStore.userInfo.isHost && <Redirect to='/' />}\n                <div className={styles.wol_status}>\n                    <h1>\n                        <ThunderboltTwoTone twoToneColor='#F4FA58' style={{ fontSize: '40px' }} />\n                        Is My desk on?\n                    </h1>\n                    {this.isOn ? <h1>On</h1> : <h1>Off</h1>}\n                    <Button onClick={this.sendWol} size='large' style={{ width: '220px' }}>PC 켜기</Button>\n                </div>\n            </div>\n        );\n    }\n\n    sendWol = async () => {\n        const res = await axios.get(`${process.env.REACT_APP_API}/utils/wol`)\n            .then(res => res.data)\n\n        if (res.success) alert(res.msg)\n        else alert(res.msg)\n    }\n}\n\nexport default Wol;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom'\nimport { inject, observer } from 'mobx-react';\nimport styles from './Header.module.css'\nimport logo from '../../assets/logo.png'\n\n@inject('userStore')\n@observer\nclass Header extends Component {\n\n\n    render() {\n        const { userStore } = this.props\n        if (userStore.isLogin) {\n            return (\n                <div className={styles.container}>\n                    <div className={styles.menu}>\n                        <Link to='/'>\n                            <img className={styles.logo} src={logo} alt='logo' />\n                        </Link>\n                    </div>\n                    {userStore.userInfo.isHost ? <div className={styles.menu}>\n                        <Link to='/wol'>Wol</Link>\n                    </div>\n                        :\n                        ''}\n                    <div className={styles.menu} onClick={this.handleLogout}>Logout</div>\n                </div >\n            )\n        } else {\n            return (\n                <div className={styles.container}>\n                    <img className={styles.logo} src={logo} alt='logo' onClick={this.handleNotLogin} />\n                    <div className={styles.menu}>\n                        <Link to='/login'>Login</Link>\n                    </div>\n                </div>\n            )\n        }\n    }\n\n    handleNotLogin = () => {\n        alert('로그인을 해주세요')\n    }\n\n    handleLogout = () => {\n        this.props.userStore.succeedLogout()\n    }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport { Home, Login, Wol } from './pages'\nimport { Header } from './components'\nimport './App.css';\nimport { inject } from 'mobx-react';\n\n@inject('userStore')\nclass App extends Component {\n\n  render() {\n    return (\n      <Router>\n        <Header />\n        <Switch>\n          <Route exact path='/' component={Home} />\n          <Route path='/login' component={Login} />\n          <Route path='/wol' component={Wol} />\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'mobx-react'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport UserStore from './stores/UserStore'\n\nconst userStore = new UserStore()\n\n\nReactDOM.render(\n  <Provider userStore={userStore} >\n    <App />\n  </Provider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { observable, action } from 'mobx'\n\nclass UserStore {\n    @observable isLogin\n    @observable userInfo\n    @observable isSession\n\n    constructor() {\n        this.isLogin = sessionStorage.getItem('user') ? true : false\n        this.userInfo = sessionStorage.getItem('user') ? JSON.parse(sessionStorage.getItem('user')) : {}\n    }\n\n    @action.bound\n    succeedLogin(userInfo) {\n        this.isLogin = true\n        this.userInfo = userInfo\n        sessionStorage.setItem('user', JSON.stringify(userInfo))\n\n    }\n\n    @action.bound\n    succeedLogout() {\n        this.isLogin = false\n        this.userInfo = {}\n        sessionStorage.removeItem('user')\n    }\n}\n\nexport default UserStore","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Header_container__1VC87\",\"logo\":\"Header_logo__3_SJs\",\"menu\":\"Header_menu__BQHSW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Home_container__1s89M\",\"username\":\"Home_username__dr-q4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Wol_container__CtQyJ\",\"wol_status\":\"Wol_wol_status__mT2hc\"};","module.exports = __webpack_public_path__ + \"static/media/logo.8aa7cb1b.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Login_container__3g5c8\"};"],"sourceRoot":""}